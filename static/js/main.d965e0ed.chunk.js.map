{"version":3,"sources":["components/Terminal.js","components/TerminalOptions.js","App.js","reportWebVitals.js","index.js"],"names":["Terminal","useState","input","setInput","executionList","setExecutionList","listPointer","setListPointer","inputRef","useRef","useEffect","current","focus","handleCloseAttempt","newError","userInput","output","identifier","Date","getTime","type","handleKeyDown","event","key","length","console","log","executeInput","e","preventDefault","trim","newExecution","eval","className","onSubmit","style","color","ref","onKeyDown","value","onChange","target","map","execution","TerminalOptions","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d965e0ed.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\nimport '../styles/Terminal.css';\r\nimport TerminalOptions from './TerminalOptions';\r\n\r\nconst Terminal = () => {\r\n\r\n   //Input/output variables\r\n   const [input, setInput] = useState('');\r\n   const [executionList, setExecutionList] = useState([]);\r\n   //Used to display commands based on user input.\r\n   const [listPointer, setListPointer] = useState(null);\r\n\r\n   //Used to force input focus on page load.\r\n   const inputRef = useRef();\r\n   useEffect(() => {\r\n      inputRef.current.focus();\r\n   }, []);\r\n\r\n      //Render error message if user attempts to close console.\r\n      const handleCloseAttempt = () => {\r\n         const newError = {\r\n            userInput: '',\r\n            output: 'Sorry, you are unable to close the console at this time.',\r\n            identifier: new Date().getTime(),\r\n            type: 'failure' //Used to render error style on UI\r\n         }\r\n         setExecutionList([newError, ...executionList])\r\n       }\r\n\r\n   //Handle input pagination and 'enter' keypress execution.\r\n   const handleKeyDown = (event) => {\r\n      if (event.key === 'ArrowUp' && listPointer !== null) {\r\n         //If greater than length, reset to 0.\r\n         if (listPointer === executionList.length - 1) {\r\n            setListPointer(executionList.length - 1);\r\n            setInput(executionList[listPointer].userInput);\r\n            console.log(listPointer);\r\n         } else {\r\n            setListPointer(listPointer + 1);\r\n            setInput(executionList[listPointer].userInput);\r\n            console.log(listPointer);\r\n         }\r\n      }\r\n      if (event.key === 'ArrowDown' && listPointer !== null) {\r\n         //If less than 0, go to end of list.\r\n         if (listPointer <= 0) {\r\n            setListPointer(0);\r\n            setInput(executionList[listPointer].userInput);\r\n            console.log(listPointer);\r\n         } else {\r\n            setListPointer(listPointer - 1);\r\n            setInput(executionList[listPointer].userInput);\r\n            console.log(listPointer);\r\n         }\r\n      }\r\n    }\r\n\r\n    //Called on 'enter' keypress.\r\n   function executeInput(e) {\r\n      e.preventDefault();\r\n      if (input.trim()) {\r\n         // Create new execution object if executable, if not, create error object and append to list.\r\n         try {\r\n            const newExecution = {\r\n               userInput: input,\r\n               output: eval(input),\r\n               identifier: new Date().getTime(), // Noted: ugly way to create unique ID's\r\n               type: 'success' \r\n            }\r\n            setInput('');\r\n            setExecutionList([newExecution, ...executionList]);\r\n            setListPointer(executionList.length);\r\n            console.log(listPointer);\r\n         } catch (e) {\r\n            setInput('');\r\n            const newError = {\r\n               userInput: `\"${input}\"`,\r\n               output: ' is not a recognizable command. Please try again.',\r\n               identifier: new Date().getTime(),\r\n               type: 'failure' //Used to render error style on UI\r\n            }\r\n            setExecutionList([newError, ...executionList]);\r\n            setListPointer(executionList.length);\r\n            console.log(listPointer);\r\n         }\r\n      }\r\n   }\r\n\r\n   return (\r\n      <div className=\"terminal\">\r\n         <TerminalOptions handleCloseAttempt={handleCloseAttempt} />\r\n         <div className=\"terminal-content\">\r\n            <form onSubmit={executeInput}>\r\n               <div className=\"input-ctr\">\r\n                  <p><span style={{color: '#2ecc71'}}>C:\\Users</span><span style={{color: '#9b59b6'}}>\\User</span> >> </p>\r\n                  <input ref={inputRef} onKeyDown={handleKeyDown} value={input} onChange={(e)=>{setInput(e.target.value)}}></input>\r\n               </div>\r\n               {/* <button type=\"submit\">Submit</button> */}\r\n            </form>\r\n            <div className=\"execution-ctr\">\r\n            {\r\n               executionList.map((execution) => {\r\n                  return <div className=\"execution\" key={execution.identifier}>\r\n                     {execution.type === 'success' ? <p>\"{execution.userInput}\" -> {execution.output}</p> : <p className=\"error\">{execution.userInput} {execution.output}</p>}\r\n                  </div>\r\n               })\r\n            }\r\n            </div>\r\n            <div className=\"warning\">\r\n               <h4>!</h4>\r\n               <div className=\"warning-msg\">\r\n                  <p><span>Please note</span>: This was made in a short period of time and is by no means a flawless program.</p>\r\n                  <p>Enter <span>simple</span> JavaScript functions such as: \"3+3\", or new String(\"test \" + \"string\") to see the result.</p>\r\n                  <p>Use <span>up/down arrows</span> on your keyboard to cycle through previous commands.</p>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Terminal\r\n","import React from 'react'\r\nimport '../styles/TerminalOptions.css';\r\n\r\nconst TerminalOptions = ({handleCloseAttempt}) => {\r\n\r\n   return (\r\n      <div className=\"terminalOptions\">\r\n         <div className=\"options\">\r\n            <h4 onClick={()=>{handleCloseAttempt()}}>-</h4>\r\n            <h4 onClick={()=>{handleCloseAttempt()}} className=\"close\">X</h4>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default TerminalOptions\r\n","import './App.css';\nimport Terminal from './components/Terminal';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Terminal/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}